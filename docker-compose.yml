services:
  brick-check:
    build: .
    container_name: brick-check-pipeline
    environment:
      # GitHub CLI needs authentication for API calls
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      # Logging configuration
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      # Google Cloud configuration
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-}
    volumes:
      # Mount output directories to persist results
      - ./list:/app/list
      - ./info:/app/info
      - ./fail:/app/fail
      # Mount DVC cache to persist downloads between runs
      - dvc-cache:/app/.dvc/cache
      # Mount logs directory for persistent logging
      - ./logs:/app/logs
      # Mount Google Cloud credentials if available
      - ${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}:${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}
    working_dir: /app
    # Override default command for different operations
    command: ["uv", "run", "dvc", "repro"]
    # Enhanced logging configuration for Google Cloud
    logging:
      driver: "gcplogs"
      options:
        gcp-project: "${GOOGLE_CLOUD_PROJECT:-brick-check-project}"
        gcp-log-cmd: "true"
        labels: "application=brick-check,environment=production,component=pipeline"
        tag: "brick-check-pipeline"
    # Health check
    healthcheck:
      test: ["CMD", "test", "-f", "/app/list/bricks.txt", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Resource limits for VM deployment
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    # Restart policy
    restart: unless-stopped
    # Network mode for better logging integration
    network_mode: bridge

  # Service for interactive development
  brick-check-dev:
    build: .
    container_name: brick-check-dev
    environment:
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-}
    volumes:
      - .:/app
      - dvc-cache:/app/.dvc/cache
      - ./logs:/app/logs
      - ${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}:${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}
    working_dir: /app
    command: ["bash"]
    stdin_open: true
    tty: true
    logging:
      driver: "gcplogs"
      options:
        gcp-project: "${GOOGLE_CLOUD_PROJECT:-brick-check-project}"
        gcp-log-cmd: "true"
        labels: "application=brick-check,environment=development,component=dev-container"
        tag: "brick-check-dev"

  # Enhanced Fluentd service with Google Cloud integration
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: brick-check-fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
      - ./logs:/var/log/brick-check
      - ${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}:${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    environment:
      - FLUENTD_CONF=fluent.conf
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT:-}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS:-}
    logging:
      driver: "gcplogs"
      options:
        gcp-project: "${GOOGLE_CLOUD_PROJECT:-brick-check-project}"
        gcp-log-cmd: "true"
        labels: "application=brick-check,environment=production,component=logging"
        tag: "fluentd"

  # Google Cloud Logging agent
  google-cloud-logging:
    image: gcr.io/google-containers/fluentd-gcp:latest
    container_name: brick-check-gcp-logging
    volumes:
      - ./logs:/var/log/brick-check:ro
      - ./gcp-logging:/etc/google-fluentd/config.d
      - ${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}:${GOOGLE_APPLICATION_CREDENTIALS:-/dev/null}
    environment:
      - GOOGLE_CLOUD_PROJECT=${GOOGLE_CLOUD_PROJECT}
      - GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS:-}
    restart: unless-stopped
    depends_on:
      - fluentd

volumes:
  dvc-cache: 